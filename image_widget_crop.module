<?php

/**
 * @file
 * Contains image_widget_crop.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Element;
use Drupal\file\Plugin\Field\FieldType\FileFieldItemList;

/**
 * Implements hook_help().
 */
function image_widget_crop_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.image_widget_crop':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Implement CROP API into the fields image');
      $output .= '<h3>' . t('Try module') . '</h3>';
      $output .= '<p>' . t('You can Test ImageWidgetCrop in action directly with the sub-module, "ImageWidgetCrop example" to test differents usecase of this module');
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function image_widget_cropfield_widget_info_alter(array &$info) {
  // Let a new field type re-use an existing widget.
  $info['image_image']['field_types'][] = 'image_widget_crop';
}

/**
 * Implements hook_entity_presave().
 */
function image_widget_crop_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if (isset($entity) && method_exists($entity, 'getFields')) {
    // Loop all fields of the saved entity.
    foreach ($entity->getFields() as $entity_fields) {
      // If current field is FileField and use imageWidgetCrop.
      if ($entity_fields instanceof FileFieldItemList && isset($entity_fields->crop_preview_wrapper)) {

        /** @var \Drupal\image_widget_crop\ImageWidgetCrop $crop */
        $crop = \Drupal::service('image_widget_crop.manager');

        /* First loop to get each elements independently in the field values.
        Required if the image field cardinality > 1. */
        foreach ($entity_fields->getValue() as $crop_element) {
          /* Parse all value of a crop_preview_wrapper element and get,
          properties associate with her CropType. */
          foreach ($crop_element['crop_preview_wrapper'] as $crop_type_name => $properties) {
            /** @var \Drupal\crop\Entity\CropType $crop_type */
            $crop_type = \Drupal::entityManager()
              ->getStorage('crop_type')
              ->loadByProperties(['id' => $crop_type_name]);

            // If the crop type needed is disabled or delete.
            if (!isset($crop_type[$crop_type_name]) || empty($crop_type[$crop_type_name])) {
              drupal_set_message(t("The CropType ('@cropType') is not active or not defined. Please verify configuration of image style or ImageWidgetCrop formatter configuration", ['@cropType' => $crop_type_name]), 'error');
              return;
            }

            // If this crop is availables to create an crop entity.
            if (($entity->isNew() && $properties['values']['delete-crop'] == '0') && isset($properties['values']) && (!empty($properties['values']['crop-w']) && !empty($properties['values']['crop-h']))) {
              // Get crop type for current cropType.
              if (!isset($crop_type) && empty($crop_type)) {
                drupal_set_message(t("The type of crop does not exist, please check the configuration of the CropType ('@cropType')", ['@cropType' => $crop_type->label()]), 'error');
                return;
              }

              $crop->applyCrop($properties['values'], $crop_element, $crop_type[$crop_type_name]);
            }

            // If the entity already exist & is not deleted by,
            // user update $crop_type_name crop entity.
            if ((!$entity->isNew() && $properties['values']['delete-crop'] == '0') && isset($properties['values']) && (!empty($properties['values']['crop-w']) && !empty($properties['values']['crop-h']))) {
              $crop->updateCrop($properties['values'], $crop_element, $crop_type[$crop_type_name]);
            }

            // If you need to delete existing crop when you edit this entity.
            if (!$entity->isNew() && $properties['values']['delete-crop'] == '1') {
              $crop->deleteCrop($crop_element['file-uri'], $crop_type[$crop_type_name], $crop_element['file-id']);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_css_alter().
 */
function image_widget_crop_css_alter(&$css) {
  // Add FontAwesome.
  $fontawesome = '//netdna.bootstrapcdn.com/font-awesome/4.0.1/css/font-awesome.min.css';
  $css[$fontawesome] = [
    'data' => $fontawesome,
    'type' => 'external',
    'every_page' => TRUE,
    'media' => 'all',
    'preprocess' => FALSE,
    'group' => CSS_AGGREGATE_THEME,
    'browsers' => ['IE' => TRUE, '!IE' => TRUE],
    'weight' => -2,
  ];
}
